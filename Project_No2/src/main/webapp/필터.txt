필터(filter)
클라이언트와 서버 사이에서 request와 response 객체를 먼저 받아 사전/사후 작업 등
공통적으로 필요한 부분을 처리하는 것
클라이언트의 요청이 웹 서버의 서블릿, JSP, HTML 페이지 같은 정적 리소스에 도달하기 전과,
반대로 정적 리소스에서 클라이언트로 응답하기 전에 필요한 전처리를 가능하게 함
필터는 HTTP 요청과 응답을 변경할 수 있는 코드로 재사용 가능
클라이언트와 정적 리소스 사이에 여러 개의 필터로 이루어진 필터 체인을 제공하기도 함

Request 필터      인증, 요청정보를 로그파일로 작성 암호화 인코딩 작업
Response 필터      응답 결과 데이터 압축 응답결과에 내용추가/수정 총 서비스 시간 측정

Filter 인터페이스
필터 기능을 구현하는 데 핵심적인 역할을 함
클라이언트와 서버의 리소스 사이에 위치한 필터의 기능을 제공하기 위해 자바 클래스로 구현해야 함

init() 메소드
JSP 컨테이너가 필터를 초기화할 때 호출되는 메소드

doFilter() 메소드
JSP 컨테이너가 필터를 리소스에 적용할 때 마다 호출되는 메소드
init() 메소드 후에 호출되며, 필터가 어떤 기능을 수행할 필요가 있을 때마다 호출

destroy() 메소드
필터 인스턴스를 종료하기 전에 호출하는 메소드
JSP 컨테이너가 필터 인스턴스를 삭제하기 전에 청소 작업을 수행하는 데 사용되며, 
이는 필터로 열린 리소스를 모두 닫을 수 있는 방법
destroy( ) 메소드는 필터의 수명 동안 한 번만 호출

web.xml 파일에 필터를 설정
필터를 사용하려면 어떤 필터가 어떤 리소스에 대해 적용되는지 JSP 컨테이너에 알려주어야 함
<filter>와 <filter-mapping> 요소를 사용
web.xml 파일에 여러 개의 필터가 설정되어 있으면 선언된 순서대로 실행

<filter-mapping> 요소
특정 리소스에 대해 어떤 필터를 사용할지 설정하는 데 사용
<filter-mapping>
	<filter-name>LogFilter</filter-name>   --> 필터 이름
	<url-pattern>/*</url-pattern>   --> url이 / 로 시작되는 모든 것을 필터링
<filter-mapping>